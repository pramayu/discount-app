font:
Fjalla One as title
Spectral as body

color schema:
#63920e grenn
#e63f21 red
#fe9d07 orange
#fdf4ec white
#393b47 dark-purple
#7f8082 gray

63920e green
faa412 orange

base: f6f5f3
dark-grey: 444
grey: dbd9d9
pastel-green: #6c7e70
#393b47 dark-purple
pink #ea4c89


#error
- insert coordinate masih kurang trapat
- pertama buat merchant -> setting; masih error
- seletah upload bersihkan extra field & image
- di tambah address (field semua kosongkan)


db.merchants.updateOne({'_id': ObjectId("5d935498d6054a10c7bd4892")}, {$unset: {"geometri": 1}}) ->
db.merchants.updateOne({'_id': ObjectId("5d935498d6054a10c7bd4892")}, {$pull: {"geometri.coordinates": null}})














{$pull: { 'location': {'_id': args.addressdeleteprop.locationID}}},
{$unset: {[pathUnset]: 1}},
{$pull: {"geometri.coordinates": null}



TF701FNKR3V0 dummy
172424205654
TF70MSW7VDQ9

ganti
172424803802
TF70YGGJSR26


ODP-SGR-FC/17 FC/D01/17.01-PANEL01-8

location: [{

}],




if(current_user || current_user._id === args.addressupdateprop.userID) {
  var merchant = await db_Merchant.findOne({'_id': args.addressupdateprop.merchantID});
  if(merchant !== null) {
    if(args.addressupdateprop.locationID) {
      var indexID = parseInt(args.addressupdateprop.indexID);
      var qrSet1 = 'location.'+indexID+'.address';
      var qrSet2 = 'location.'+indexID+'.distric';
      var qrSet3 = 'location.'+indexID+'.province';
      // var qrSet4 = 'location.'+indexID+'.coordinate.0.latitude';
      // var qrSet5 = 'location.'+indexID+'.coordinate.0.longitude';
      var updatemerchant = await db_Merchant.updateOne({
        '_id': args.addressupdateprop.merchantID, 'location': {$elemMatch: {'_id': args.addressupdateprop.locationID}}
      }, {$set: {
        [`${qrSet1}`]: merchant.location[indexID].address !== args.addressupdateprop.address ? args.addressupdateprop.address : merchant.location[indexID].address,
        [`${qrSet2}`]: merchant.location[indexID].distric !== args.addressupdateprop.distric ? args.addressupdateprop.distric : merchant.location[indexID].distric,
        [`${qrSet3}`]: merchant.location[indexID].province !== args.addressupdateprop.province ? args.addressupdateprop.province : merchant.location[indexID].province,
        // [`${qrSet4}`]: merchant.location[indexID].coordinate[0].latitude !== args.addressupdateprop.latitude ? args.addressupdateprop.latitude : merchant.location[indexID].coordinate[0].latitude,
        // [`${qrSet5}`]: merchant.location[indexID].coordinate[0].longitude !== args.addressupdateprop.longitude ? args.addressupdateprop.longitude : merchant.location[indexID].coordinate[0].longitude,
      }});
      if(updatemerchant.ok === 1) {
        var savelocation = await db_Merchant.findOne({
          '_id': args.addressupdateprop.merchantID
        });
        console.log(savelocation)
        return {
          status: true,
          error: [],
          location: savelocation.location
        }
      }
    } else {
      var coordinates = [parseFloat(args.addressupdateprop.latitude), parseFloat(args.addressupdateprop.longitude)];
      var location = [];
      location.push({
        address: args.addressupdateprop.address,
        distric: args.addressupdateprop.distric,
        province: args.addressupdateprop.province,
      });
      // merchant.geometri.coordinates.push(coordinates)
      // var savemerchant = await merchant.save();
      var updateMerchant = await db_Merchant.updateOne({'_id': merchant._id}, {$push: {
        'location': location, 'geometri.coordinates': coordinates
      }});
      console.log(updateMerchant)
      if(updateMerchant.ok === 1) {
        var savemerchant = await db_Merchant.findOne({'_id': merchant._id});
        if(savemerchant) {
          var newlocation = _.filter(savemerchant.location, (loc) => {
            return loc.address === args.addressupdateprop.address
          });
          return {
            status: true,
            error: [],
            location: newlocation
          }
        }
      }
    }
  } else {
    return {
      status: false,
      error: [{
        path: 'addressupdatemerchant',
        message: 'merchant not found'
      }]
    }
  }
} else {
  return {
    status: false,
    error: [{
      path: 'addressupdatemerchant',
      message: 'plase re-login'
    }]
  }
}


var pathUnset = "geometri.coordinates."+args.addressdeleteprop.indexID;
var deleteaddress = await db_Merchant.updateOne({'_id': args.addressdeleteprop.merchantID}, {
  $pull: { 'location': {'_id': args.addressdeleteprop.locationID} }
});
await db_Merchant.updateOne({'_id': args.addressdeleteprop.merchantID}, {
  $unset: {[`${pathUnset}`]: 1}
});
await db_Merchant.updateOne({'_id': args.addressdeleteprop.merchantID}, {
  $pull: {"geometri.coordinates": null}
});
if(deleteaddress.ok === 1) {
  return {
    status: true,
    error: []
  }
}
